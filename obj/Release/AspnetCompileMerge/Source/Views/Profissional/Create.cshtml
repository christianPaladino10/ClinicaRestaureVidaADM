@model AdminRestaureVida.Models.Profissional

@{
    ViewBag.Title = "Create";
}

<h2>Cadastrar</h2>


@using (Html.BeginForm("AdicionarProfissional", "Profissional", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <h4>Profissional</h4>
    <hr />

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <form class="row">
        <div class="col-md-12">
            <div class="form-group row">
                @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-11">
                    @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @*@Html.EditorFor(model => model.Celular, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Celular, "", new { @class = "text-danger" })*@

                    <input type="email" value="" name="Email" id="Email" class="form-control" required />
                </div>

                @Html.LabelFor(model => model.Senha, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @*@Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })*@

                    <input type="password" value="" name="Senha" id="Senha" class="form-control" maxlength="20" required />
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Celular, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @*@Html.EditorFor(model => model.Celular, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Celular, "", new { @class = "text-danger" })*@

                    <input type="text" value="" name="Celular" id="Celular" class="form-control" maxlength="15" />
                </div>

                @Html.LabelFor(model => model.Telefone, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @*@Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })*@

                    <input type="text" value="" name="Telefone" id="Telefone" class="form-control" maxlength="15" />
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @*@Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })*@

                    <input type="text" class="form-control" value="" id="CPF" name="CPF" onkeydown="javascript: fMasc( this, mCPF );">
                    @*<input type="submit" value="Validar" class="btn btn-default" onclick="ValidaCPF();">*@
                </div>

                @Html.LabelFor(model => model.DataNascimento, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2">
                    @*@Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })*@

                    <input type="text" class="form-control" name="DataNascimento" id="DataNascimento" placeholder="00/00/0000" value="" maxlength="10" onkeypress="mascaraData(this)" />
                </div>
            </div>

            <div class="form-group row">
                <label class="control-label col-md-1">Segmento</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.SegmentoId, (SelectList)ViewBag.Segmentos, "Select Segmento", new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group row">
                <div class="col-md-offset-1 col-md-10">
                    <input type="submit" value="Salvar" class="btn btn-primary" />
                </div>
            </div>

        </div>
    </form>
}

<a href="/Profissional/Index"><span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>&nbsp;Voltar</a>

<script>
    //CPF
    function ValidaCPF() {
        var RegraValida = document.getElementById("RegraValida").value;
        var cpfValido = /^(([0-9]{3}.[0-9]{3}.[0-9]{3}-[0-9]{2})|([0-9]{11}))$/;
        if (cpfValido.test(RegraValida) == true) {
            console.log("CPF Válido");
        } else {
            console.log("CPF Inválido");
        }
    }

    function fMasc(objeto, mascara) {
        obj = objeto
        masc = mascara
        setTimeout("fMascEx()", 1)
    }

    function fMascEx() {
        obj.value = masc(obj.value)
    }

    function mCPF(cpf) {
        cpf = cpf.replace(/\D/g, "")
        cpf = cpf.replace(/(\d{3})(\d)/, "$1.$2")
        cpf = cpf.replace(/(\d{3})(\d)/, "$1.$2")
        cpf = cpf.replace(/(\d{3})(\d{1,2})$/, "$1-$2")
        return cpf
    }

    //Datas
    function mascaraData(val) {
        var pass = val.value;
        var expr = /[0123456789]/;

        for (i = 0; i < pass.length; i++) {
            var lchar = val.value.charAt(i);
            var nchar = val.value.charAt(i + 1);

            if (i == 0) {
                if ((lchar.search(expr) != 0) || (lchar > 3)) {
                    val.value = "";
                }

            } else if (i == 1) {

                if (lchar.search(expr) != 0) {
                    var tst1 = val.value.substring(0, (i));
                    val.value = tst1;
                    continue;
                }

                if ((nchar != '/') && (nchar != '')) {
                    var tst1 = val.value.substring(0, (i) + 1);

                    if (nchar.search(expr) != 0)
                        var tst2 = val.value.substring(i + 2, pass.length);
                    else
                        var tst2 = val.value.substring(i + 1, pass.length);

                    val.value = tst1 + '/' + tst2;
                }

            } else if (i == 4) {

                if (lchar.search(expr) != 0) {
                    var tst1 = val.value.substring(0, (i));
                    val.value = tst1;
                    continue;
                }

                if ((nchar != '/') && (nchar != '')) {
                    var tst1 = val.value.substring(0, (i) + 1);

                    if (nchar.search(expr) != 0)
                        var tst2 = val.value.substring(i + 2, pass.length);
                    else
                        var tst2 = val.value.substring(i + 1, pass.length);

                    val.value = tst1 + '/' + tst2;
                }
            }

            if (i >= 6) {
                if (lchar.search(expr) != 0) {
                    var tst1 = val.value.substring(0, (i));
                    val.value = tst1;
                }
            }
        }

        if (pass.length > 10)
            val.value = val.value.substring(0, 10);
        return true;
    }

    //Celular Telefone
    window.onload = function () {
        document.getElementById('Celular').onkeyup = function () {
            mascara(this, mcel);
        }
        document.getElementById('Telefone').onkeyup = function () {
            mascara(this, mcel);
        }
    }

    function mascara(o, f) {
        v_obj = o
        v_fun = f
        setTimeout("execmascara()", 1)
    }

    function execmascara() {
        v_obj.value = v_fun(v_obj.value)
    }

    function mcel(v) {
        v = v.replace(/\D/g, "");
        v = v.replace(/^(\d{2})(\d)/g, "($1) $2");
        v = v.replace(/(\d)(\d{4})$/, "$1-$2");
        return v;
    }


</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
