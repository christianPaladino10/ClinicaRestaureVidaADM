@model AdminRestaureVida.Models.Cliente

@{
    ViewBag.Title = "Edit";
}

<h2>Editar</h2>


@using (Html.BeginForm("EditarCliente", "Cliente", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <h4>Cliente</h4>
    <hr />

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <form class="row">
        <div class="col-md-12">
            @Html.HiddenFor(model => model.Id)

            <div class="form-group row">
                @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-11">
                    @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })*@
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.DataNascimento, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2">
                    @if (Model.DataNascimento != null)
                    {
                        <input type="text" class="form-control" name="DataNascimento" placeholder="00/00/0000" id="DataNascimento" value="@Model.DataNascimento.Value.ToShortDateString()" maxlength="10" onkeypress="mascaraData(this)" />
                    }
                    else
                    {
                        <input type="text" class="form-control" name="DataNascimento" placeholder="00/00/0000" id="DataNascimento" value="" maxlength="10" onkeypress="mascaraData(this)" />
                    }
                </div>

                @Html.LabelFor(model => model.Idade, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2">
                    @Html.EditorFor(model => model.Idade, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Idade, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.Altura, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2">
                    @*@Html.EditorFor(model => model.Altura, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Altura, "", new { @class = "text-danger" })*@

                    <input type="text" class="form-control" value="@Model.Altura" id="Altura" name="Altura" maxlength="4">
                    @Html.ValidationMessageFor(model => model.Altura, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.Peso, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2">
                    @Html.EditorFor(model => model.Peso, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Peso, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.RG, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(model => model.RG, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RG, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @*@Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })*@

                    <input type="text" class="form-control" value="@Model.CPF" id="CPF" name="CPF" onkeydown="javascript: fMasc( this, mCPF );">
                    @*<input type="submit" value="Validar" class="btn btn-default" onclick="ValidaCPF();">*@
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Celular, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @*@Html.EditorFor(model => model.Celular, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Celular, "", new { @class = "text-danger" })*@

                    <input type="text" value="@Model.Celular" name="Celular" id="Celular" class="form-control" maxlength="15" />
                </div>

                @Html.LabelFor(model => model.Telefone, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @*@Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })*@

                    <input type="text" value="@Model.Telefone" name="Telefone" id="Telefone" class="form-control" maxlength="15" />
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EstadoCivil, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @*@Html.EditorFor(model => model.EstadoCivil, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EstadoCivil, "", new { @class = "text-danger" })*@

                    <select class="form-control" id="EstadoCivil" name="EstadoCivil">
                        <option>Selecione</option>
                        <option>Solteiro</option>
                        <option>Casado</option>
                        <option>Separado</option>
                        <option>Divorciado</option>
                        <option>Viúvo</option>
                    </select>
                </div>

                @Html.LabelFor(model => model.Profissao, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(model => model.Profissao, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Profissao, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.NomeConjuge, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NomeConjuge, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NomeConjuge, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.NomePai, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-7">
                    @Html.EditorFor(model => model.NomePai, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NomePai, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.DataNascimentoPai, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    @*@Html.EditorFor(model => model.DataNascimentoPai, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DataNascimentoPai, "", new { @class = "text-danger" })*@
                    @if (@Model.DataNascimentoPai != null)
                    {
                        <input type="text" class="form-control" value="@Model.DataNascimentoPai.Value.ToShortDateString()" name="DataNascimentoPai" id="DataNascimentoPai" maxlength="10" onkeypress="mascaraData(this)" />
                    }
                    else
                    {
                        <input type="text" class="form-control" value="" name="DataNascimentoPai" id="DataNascimentoPai" maxlength="10" onkeypress="mascaraData(this)" />
                    }

                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.NomeMae, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-7">
                    @Html.EditorFor(model => model.NomeMae, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NomeMae, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.DataNascimentoMae, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    @*@Html.EditorFor(model => model.DataNascimentoMae, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DataNascimentoMae, "", new { @class = "text-danger" })*@
                    @if (@Model.DataNascimentoMae != null)
                    {
                        <input type="text" class="form-control" value="@Model.DataNascimentoMae.Value.ToShortDateString()" name="DataNascimentoMae" id="DataNascimentoMae" maxlength="10" onkeypress="mascaraData(this)" />
                    }
                    else
                    {
                        <input type="text" class="form-control" value="" name="DataNascimentoMae" id="DataNascimentoMae" maxlength="10" onkeypress="mascaraData(this)" />
                    }

                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.CEP, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.CEP, new { htmlAttributes = new { @class = "form-control", maxlength = "9" } })
                    @Html.ValidationMessageFor(model => model.CEP, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Endereco, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-11">
                    @Html.EditorFor(model => model.Endereco, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Endereco, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Bairro, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Bairro, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Bairro, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.Cidade, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-5">
                    @Html.EditorFor(model => model.Cidade, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Cidade, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-1">
                    @Html.EditorFor(model => model.Estado, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                @Html.LabelFor(model => model.Numero, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-2">
                    @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.Complemento, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.Complemento, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Complemento, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <div class="col-md-offset-1 col-md-10">
                    <input type="submit" value="Atualizar" class="btn btn-primary" />
                </div>
            </div>

        </div>
    </form>
}

<a href="/Cliente/Index"><span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>&nbsp;Voltar</a>


<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.15/jquery.mask.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/3.2.6/jquery.inputmask.bundle.min.js"></script>

<script type="text/javascript">

    //Altura
    $('#Altura').mask("#.##", { reverse: true });

    //CPF
    function ValidaCPF() {
        var RegraValida = document.getElementById("RegraValida").value;
        var cpfValido = /^(([0-9]{3}.[0-9]{3}.[0-9]{3}-[0-9]{2})|([0-9]{11}))$/;
        if (cpfValido.test(RegraValida) == true) {
            console.log("CPF Válido");
        } else {
            console.log("CPF Inválido");
        }
    }

    function fMasc(objeto, mascara) {
        obj = objeto
        masc = mascara
        setTimeout("fMascEx()", 1)
    }

    function fMascEx() {
        obj.value = masc(obj.value)
    }

    function mCPF(cpf) {
        cpf = cpf.replace(/\D/g, "")
        cpf = cpf.replace(/(\d{3})(\d)/, "$1.$2")
        cpf = cpf.replace(/(\d{3})(\d)/, "$1.$2")
        cpf = cpf.replace(/(\d{3})(\d{1,2})$/, "$1-$2")
        return cpf
    }

    //Datas
    function mascaraData(val) {
        var pass = val.value;
        var expr = /[0123456789]/;

        for (i = 0; i < pass.length; i++) {
            var lchar = val.value.charAt(i);
            var nchar = val.value.charAt(i + 1);

            if (i == 0) {
                if ((lchar.search(expr) != 0) || (lchar > 3)) {
                    val.value = "";
                }

            } else if (i == 1) {

                if (lchar.search(expr) != 0) {
                    var tst1 = val.value.substring(0, (i));
                    val.value = tst1;
                    continue;
                }

                if ((nchar != '/') && (nchar != '')) {
                    var tst1 = val.value.substring(0, (i) + 1);

                    if (nchar.search(expr) != 0)
                        var tst2 = val.value.substring(i + 2, pass.length);
                    else
                        var tst2 = val.value.substring(i + 1, pass.length);

                    val.value = tst1 + '/' + tst2;
                }

            } else if (i == 4) {

                if (lchar.search(expr) != 0) {
                    var tst1 = val.value.substring(0, (i));
                    val.value = tst1;
                    continue;
                }

                if ((nchar != '/') && (nchar != '')) {
                    var tst1 = val.value.substring(0, (i) + 1);

                    if (nchar.search(expr) != 0)
                        var tst2 = val.value.substring(i + 2, pass.length);
                    else
                        var tst2 = val.value.substring(i + 1, pass.length);

                    val.value = tst1 + '/' + tst2;
                }
            }

            if (i >= 6) {
                if (lchar.search(expr) != 0) {
                    var tst1 = val.value.substring(0, (i));
                    val.value = tst1;
                }
            }
        }

        if (pass.length > 10)
            val.value = val.value.substring(0, 10);
        return true;
    }

    //Celular Telefone
    window.onload = function () {
        document.getElementById('Celular').onkeyup = function () {
            mascara(this, mcel);
        }
        document.getElementById('Telefone').onkeyup = function () {
            mascara(this, mcel);
        }
    }

    function mascara(o, f) {
        v_obj = o
        v_fun = f
        setTimeout("execmascara()", 1)
    }

    function execmascara() {
        v_obj.value = v_fun(v_obj.value)
    }

    function mcel(v) {
        v = v.replace(/\D/g, "");
        v = v.replace(/^(\d{2})(\d)/g, "($1) $2");
        v = v.replace(/(\d)(\d{4})$/, "$1-$2");
        return v;
    }

    //CEP
    $('#CEP').mask("####-###", { reverse: true });

    $(document).ready(function () {

        function limpa_formulário_cep() {
            // Limpa valores do formulário de cep.
            $("#Endereco").val("");
            $("#Bairro").val("");
            $("#Cidade").val("");
            $("#Estado").val("");
        }

        //Quando o campo cep perde o foco.
        $("#CEP").blur(function () {

            //Nova variável "cep" somente com dígitos.
            var cep = $(this).val().replace(/\D/g, '');

            //Verifica se campo cep possui valor informado.
            if (cep != "") {

                //Expressão regular para validar o CEP.
                var validacep = /^[0-9]{8}$/;

                //Valida o formato do CEP.
                if (validacep.test(cep)) {

                    //Preenche os campos com "..." enquanto consulta webservice.
                    $("#Endereco").val("...");
                    $("#Bairro").val("...");
                    $("#Cidade").val("...");
                    $("#Estado").val("...");

                    //Consulta o webservice viacep.com.br/
                    $.getJSON("https://viacep.com.br/ws/" + cep + "/json/?callback=?", function (dados) {

                        if (!("erro" in dados)) {
                            //Atualiza os campos com os valores da consulta.
                            $("#Endereco").val(dados.logradouro);
                            $("#Bairro").val(dados.bairro);
                            $("#Cidade").val(dados.localidade);
                            $("#Estado").val(dados.uf);
                        } //end if.
                        else {
                            //CEP pesquisado não foi encontrado.
                            limpa_formulário_cep();
                            alert("CEP não encontrado.");
                        }
                    });
                } //end if.
                else {
                    //cep é inválido.
                    limpa_formulário_cep();
                    alert("Formato de CEP inválido.");
                }
            } //end if.
            else {
                //cep sem valor, limpa formulário.
                limpa_formulário_cep();
            }
        });
    });

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
